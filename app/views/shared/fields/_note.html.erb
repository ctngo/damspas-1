<%
  # make sure locals are defined
  type = nil unless local_assigns[:type]
  label = nil unless local_assigns[:label]
  exclude_type = [] unless local_assigns[:exclude_type]
  exclude_label = [] unless local_assigns[:exclude_label]

  if defined?(componentIndex) # Then we're working with a component
    prefix = "component_#{componentIndex}_"
    htmlOpen = "<tr><td>%s</td><td>"
    htmlClose = "</td></tr>"
  else # We're working with an object or collection
    prefix = ''
    htmlOpen = "<dt>%s</dt><dd>"
    htmlClose = "</dd>"
  end

  # parse notes
  notes = []
  data = @document["#{prefix}note_json_tesim"]
  if data != nil
    data.each do |n|
      note = JSON.parse(n)
      note_type = note['type']
      note_label = note['displayLabel']

      # add notes if type/label match specification
      if ( type == nil || type == note_type ) &&
         ( label == nil || label == note_label ) &&
         ( exclude_type == nil || !exclude_type.include?(note_type) ) &&
         ( exclude_label == nil || !exclude_label.include?(note_label) )
        logger.warn "XXX note: #{note_type}.#{note_label}"
        notes << note
      else
        logger.warn "XXX excluded note: #{note_type}.#{note_label} != #{type}.#{label}"
      end
    end
  end

  if notes.count > 0
    htmlOpen %= 'Note'.pluralize(notes.count)
    concat htmlOpen.html_safe
    notes.each do |note| %>
      <p>
        <strong>
          <% if note['displayLabel'] != nil && !note['displayLabel'].blank? %>
            <%= note['displayLabel'].upcase %>
          <% elsif note['type'] != nil && !note['type'].blank? %>
            <%= note['type'].upcase %>
          <% else %>
            General Note
          <% end %>
        </strong>
      </p>
      <p><%= auto_link(note['value']) %></p>
<%  end
    concat htmlClose.html_safe
  end
%>
